knitr::opts_chunk$set(echo = TRUE)
View(oza)
oza = read.csv("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/TD/TD2/OzoneANOVA1.csv",
sep=";",
dec=",")
dim(oza)
View(oza)
oza$vent <- fct_recode(oza$vent,
"1"="Nord",
"2"= "Sud",
"3"="Est",
"4"="Ouest"
)
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/PROJET/codageR_TOTAL_R_MARDOWN_EC_BT.R")
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/My_function.R")
library(dplyr)
library(readr)
library(ggplot2)
library(flextable)
library(forcats)
library(stats)
library(base)
library(car)
library(vip)
oza = read.csv("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/TD/TD2/OzoneANOVA1.csv",
sep=";",
dec=",")
dim(oza)
View(oza)
oza$vent <- fct_recode(oza$vent,
"1"="Nord",
"2"= "Sud",
"3"="Est",
"4"="Ouest"
)
oza$vent<-as.factor(oza$vent)
oza$maxO3<-as.numeric(oza$maxO3)
vent=oza$vent
o3=oza$maxO3
boxplot(o3[vent=="1"],o3[vent=="2"],o3[vent=="3"],o3[vent=="4"],names=c("Nord","Sud","Est","Ouest"),col=c("cyan","pink","green","red"), main="Comparaison de maxO3 en fonction du vent ",horizontal=F)
ggplot(data=oza,aes(x=vent,y=maxO3))+geom_point(na.rm=TRUE)
model<-aov(formula=oza$maxO3~oza$vent)
summary(model)
plot(model)
model2<-lm(aov(formula=oza$maxO3~oza$vent))
summary(model2)
plot(model2)
ozb = read.csv("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/TD/TD2/OzoneANOVA2.csv",
sep=";",
dec=",")
dim(ozb)
View(ozb)
ozb$vent <- fct_recode(ozb$vent,
"1"="Nord",
"2"= "Sud",
"3"="Est",
"4"="Ouest"
)
ozb$pluie<-fct_recode(ozb$pluie,
"0"="Sec",
"1"="Pluie")
ozb$vent<-as.factor(ozb$vent)
ozb$maxO3<-as.numeric(ozb$maxO3)
ozb1=ozb$maxO3
vent=ozb$vent
boxplot(ozb1[vent=="1"],ozb1[vent=="2"],ozb1[vent=="3"],ozb1[vent=="4"],names=c("Nord","Sud","Est","Ouest"),col=c("cyan","pink","green","red"), main="Comparaison de maxO3 en fonction du vent ",horizontal=F)
plot(maxO3~pluie,data=ozb,col=c("cyan","green"))
boxplot(maxO3~vent+pluie,data=ozb,col=rep(c("blue","orange"),each=3),xlab="pluie.vent",ylab="maxO3")
formula_TD2<-as.formula(maxO3~vent*pluie)
model2_avec_interaction<-lm(formula = formula_TD2,data=ozb)
summary(model2_1)
formula_TD2<-as.formula(maxO3~vent*pluie)
model2_avec_interaction<-lm(formula = formula_TD2,data=ozb)
summary(model2_avec_interaction)
summary.lm(model2_avec_interaction)
plot(model2_avec_interaction)
rm(formula_TD2)
formula_TD2<-as.formula(maxO3~vent+pluie)
model2_additif<-lm(formula = formula_TD2,data=ozb)
summary(model2_additif)
anova(model2_additif,model2_avec_interaction)
rm(formula_TD2)
formula_TD2<-as.formula(maxO3~.)
model2_additif<-lm(formula = formula_TD2,data=ozb)
summary(model2_additif)
encoding = "UTF-8"
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
ft.align = "left"
)
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/PROJET/codageR_TOTAL_R_MARDOWN_EC_BT.R")
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/My_function.R")
#librairies
library(DataCombine)
library(prodlim)
library(binom)
library(gsDesign)
library(cvAUC)
library(caret)
library(vcd)
library(greyzoneSurv)
library(mgcv)
library(randomForest)
library(datasets)
library(keras)
library(mlbench)
library(magrittr)
library(neuralnet)
library(tensorflow)
library(openxlsx)
library(broom)
library(flextable)
#library(idefix)
library(magrittr)
library(dplyr)
library(officer)
library(stringr)
library(forcats)
library(regclass)
library(car)
library(epiDisplay)
library(caTools)*
library(ggcorrplot)
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/PROJET/codageR_TOTAL_R_MARDOWN_EC_BT.R")
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/My_function.R")
#librairies
library(DataCombine)
library(prodlim)
library(binom)
library(gsDesign)
library(cvAUC)
library(caret)
library(vcd)
library(greyzoneSurv)
library(mgcv)
library(randomForest)
library(datasets)
library(keras)
library(mlbench)
library(magrittr)
library(neuralnet)
library(tensorflow)
library(openxlsx)
library(broom)
library(flextable)
#library(idefix)
library(magrittr)
library(dplyr)
library(officer)
library(stringr)
library(forcats)
library(regclass)
library(car)
library(epiDisplay)
library(caTools)
library(ggcorrplot)
install.packages("ggcorrplot")
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/PROJET/codageR_TOTAL_R_MARDOWN_EC_BT.R")
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/My_function.R")
#librairies
library(DataCombine)
library(prodlim)
library(binom)
library(gsDesign)
library(cvAUC)
library(caret)
library(vcd)
library(greyzoneSurv)
library(mgcv)
library(randomForest)
library(datasets)
library(keras)
library(mlbench)
library(magrittr)
library(neuralnet)
library(tensorflow)
library(openxlsx)
library(broom)
library(flextable)
#library(idefix)
library(magrittr)
library(dplyr)
library(officer)
library(stringr)
library(forcats)
library(regclass)
library(car)
library(epiDisplay)
library(caTools)
library(ggcorrplot)
#library(questionr)
encoding = "UTF-8"
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
ft.align = "left"
)
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/PROJET/codageR_TOTAL_R_MARDOWN_EC_BT.R")
source("C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/My_function.R")
#librairies
library(DataCombine)
library(prodlim)
library(binom)
library(gsDesign)
library(cvAUC)
library(caret)
library(vcd)
library(greyzoneSurv)
library(mgcv)
library(randomForest)
library(datasets)
library(keras)
library(mlbench)
library(magrittr)
library(neuralnet)
library(tensorflow)
library(openxlsx)
library(broom)
library(flextable)
#library(idefix)
library(magrittr)
library(dplyr)
library(officer)
library(stringr)
library(forcats)
library(regclass)
library(car)
library(epiDisplay)
library(caTools)
library(ggcorrplot)
#library(questionr)
##### paramétrage des sorties tableaux
etude= ""
version= ""
biostat= ""
dm= ""
nom_rapport= "RAPPORT_STATISTIQUE_FINAL6"
auteur_rapport= ""
valide_par= ""
invest= ""
fichier_o= ""
syntaxe=""
donnees= ""
log= "R 3.6.1"
com= "RAS"
col1=c("Étude","Version","Biostatisticien","Data Manager","Nom du Rapport","Auteur du Rapport","Validé par","Investigateur","Fichier original","Syntaxe","Données analysées","Logiciel","Commentaires")
col2=c(etude,version,biostat,dm,nom_rapport,auteur_rapport,valide_par,invest,fichier_o,syntaxe,donnees,log,com)
d1=data.frame(col1,col2)
ft <- flextable(d1)
ft <- align(ft, align = "left")
ft <- bold(ft, j=1, bold = TRUE, part = "body")
ft <- delete_part(ft, part = "header")
ft=fontsize(ft,size = 8, part = "all")
ft <- autofit(ft)
ft=FitFlextableToPage(ft)  ##  à utiliser si le tableau dépasse des marges
#ft
rm(ft)
tabvalid<-data.frame(Fonction=c("Biostatisticien","Data manager","Investigateur coordonnateur","Chef de projet","Responsable"),Nom=c("","",""," ","") ,Prenom=c("","",""," ",""),Date="        ",Signature="                    ")
ft <- flextable(tabvalid)
ft<-autofit(ft)
ft <- bold(ft, j=1, bold = TRUE, part = "body")
ft <- bold(ft, bold = TRUE, part = "header")
ft=fontsize(ft,size = 8, part = "all")
ft <- align(ft, align = "left", part = "all" )
ft <- align(ft, j=4, align = "center", part = "body")
ft=height_all(ft, 0.6, part = "body")
ft=border_outer(ft,border = fp_border(color="black"), part = "all")
ft=border_inner_h(ft,border = fp_border(color="black"), part = "all")
ft=border_inner_v(ft,border = fp_border(color="black"), part = "all")
# ft=FitFlextableToPage(ft) ##  à utiliser si le tableau dépasse des marges
#ft
rm(ft)
df = readxl::read_xlsx(path = "C:/Users/Tom/Documents/Cours/Polytech/4A/4A/S1/Analyse_données/PROJET/données_sources/BDD.xlsx",
sheet = 1,
col_names = TRUE,
col_types = "text",
na = c(NA,"NE",""))
# Or ici toutes les colonnes sont de type "text".
# Toutes les colonnes sont de type "factor". (variables qualitatives)
# Les colonnes 1,6,12,31,44,79 qui sont de type "numeric". ( variables quantitatives)
# Puis les colonnes 4,76,108,120,121,134,161 qui sont de type "character". (commentaires)
############################## ASSOCIATION DU BON TYPE A CHAQUE COLONNE
#on traite cette colonne séparément (on la convertit en factor) car elle contient des modalités avec des lettres "4A" et "4B" ...
df[38]=as.factor(df[[38]])
#ici on convertit les colonnes de type texte en type numeric
col_indx_to_number = c( 1:3 , 5:37, 39:75 , 77:107 , 109:119 , 122:133 , 135:(ncol(df)-1) ) #sauf les colonnes 4,76,108,120,121,134,161 qui doivent rester en type "character"
df[,col_indx_to_number] = lapply( df[,col_indx_to_number] , as.numeric)
#ici on convertit les colonnes en type factor
col_indx_to_factor = c( 2:3 , 5, 7:11, 13:30 , 32:37 , 39:43 , 45:75 , 77:78, 80:107 , 109:119 , 122:133 , 135:(ncol(df)-1) ) #sauf les colonnes 1,6,12,31,44,79 qui sont des nombres
df[,col_indx_to_factor] = lapply( df[,col_indx_to_factor] , as.factor)
############################## SELECTION DES PATIENTS ELIGIBLE
#on ne sélectionne seulement les patients éligibles
df=df[df$ELIGIBILITE==1,]
############################## SUPPRESSION DES COLONNES REDONDANTES
#on enlève une colonne redondante en terme d'apport d'information
df=df[,-7]
df=df[-numcol(c("TI_RADS_4B-5","TI_RADS_<4B","EU_TIRADS","EU_TIRADS_4-5","EU_TIRADS_<4","HYPERECHOGENE"),df)]
############################ RECODAGE DE VARIABLES CATEGORIELLES
df$COLLOIDE[df$COLLOIDE %in% c(0,1)] = 0
df$COLLOIDE[df$COLLOIDE %in% c(2,3)] = 1
df$COLLOIDE=factor(df$COLLOIDE)
names(df)[which(names(df)=="COLLOIDE")]="COLLOIDE_regroup"
df$TI_RADS[df$TI_RADS %in% c(2,3)] = 3
df$TI_RADS=factor(df$TI_RADS)
names(df)[which(names(df)=="TI_RADS")]="TI.RADS.Score"
############################## DERNIER TRAITEMENT POUR "ENJOLIVER" LA BASE
mettre_en_forme <- function(bdd) {
## MISE EN FORME DE LA VARIABLE DINTERET "CANCER"
bdd=bdd[-which(names(bdd)=="BENIN")]
names(bdd)[which(names(bdd)=="MALIN")]="CANCER"
#bdd=bdd[-which(names(bdd)=="SUBJID")]
bdd=bdd[-which(names(bdd)=="ELIGIBILITE")]
# bdd= bdd[ c( which(lapply(bdd, is.factor)==TRUE) , which(lapply(bdd, is.numeric)==TRUE) , which(lapply(bdd, is.character)==TRUE) ) ]
bdd= bdd[ c( which(lapply(bdd, is.factor)==TRUE) , which(lapply(bdd, is.numeric)==TRUE) ) ]
bdd = bdd %>% relocate(CANCER)
#names(bdd)[names(bdd[,4])]="Age"
names(bdd)[names(bdd)=="ATYPIES_ARCHI_PSEUDO-PAPILLAIRE"]="ATYPIES_ARCHI_PSEUDO_PAPILLAIRE"
names(bdd)[names(bdd)=="CYTO_SUB-CLASSIF"]="CYTO_SUB_CLASSIF"
names(bdd)[names(bdd)=="cN+"]="cN_plus"
names(bdd)[names(bdd)=="LARGES_LAMBEAUX_ MONOCOUCHES"]="LARGES_LAMBEAUX_MONOCOUCHES"
names(bdd)=str_replace_all(names(bdd),"/","_")
return(bdd)
}
df=mettre_en_forme(df)
df$Age <- fct_recode(df$Age,
"<55"= "0",
"≥55"="1"
)
df$Consistance <- fct_recode(df$Consistance,
"No"= "0",
"Yes"="1"
)
df$Totally.solid <- fct_recode(df$Totally.solid,
"No"= "0",
"Yes"="1"
)
df$Disurpted.rim.classification <- fct_recode(df$Disurpted.rim.classification,
"No"= "0",
"Yes"="1"
)
df$Hyperthyroidism <- fct_recode(df$Hyperthyroidism,
"No"= "0",
"Yes"="1"
)
df$TI.RADS.Score <- fct_recode(df$TI.RADS.Score,
"2-3"= "3",
"4A"="4A",
"4B"="4B",
)
taille<-dim(df)
taille
###Quantitatives
index=c(140:145)                          #Sélectionne les colonnes d'intérêt à la main
ft=sortiequanti(as.data.frame(df),index)  #Fonction de codage R total,
ft=md_table(ft)                           #Tableau plus joli
ft                                        #Affichage du tableau
rm(ft,index)                              #On supprime les valeurs pour les réutiliser après
index=c(1:139)
ft=sortiequali(as.data.frame(df),index)
ft=md_table(ft)
ft
rm(ft,index)
valid<-rbind(df[(df$CENTRE==4),],df[(df$CENTRE==5),]) #Toulouse
Nice<-rbind(df[(df$CENTRE==1),],df[(df$CENTRE==2),],df[(df$CENTRE==3),],df[(df$CENTRE==6),])#Nice
appren_int<-sample(nrow(Nice),nrow(Nice)*0.7)#récupération des indices de l'échantillon
appren<-Nice[appren_int,]
valid_2<-Nice[-appren_int,]
index=c(140:145)
ft=sortiequanti(as.data.frame(appren),index)
ft=md_table(ft)
ft
rm(ft,index)
index=c(1:139)
ft=sortiequali(as.data.frame(appren),index)
ft=md_table(ft)
ft
rm(ft,index)
index=c(140:145)
ft=sortiequanti(as.data.frame(valid),index)
ft=md_table(ft)
ft
rm(ft,index)
index=c(1:139)
ft=sortiequali(as.data.frame(valid),index)
ft =md_table(ft)
ft
rm(ft,index)
index=c(140:145)
ft=sortiequanti(as.data.frame(valid_2),index)
ft=md_table(ft)
ft
rm(ft,index)
index=c(1:139)
ft=sortiequali(as.data.frame(valid_2),index)
ft=md_table(ft)
ft
rm(ft,index)
appren<-drop_level_0_and_unassociate(appren,1)
corr<-round(cor(appren),1)
ggcorrplot(corr,hc.order = TRUE, type = "lower",lab = TRUE)
View(appren)
corr<-round(cor(appren[,112:117]),1)
ggcorrplot(corr,hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-na.omit(appren)
corr<-round(cor(appren_drop_Na[,112:117]),1)
ggcorrplot(corr,hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-na.omit(appren)
corr<-round(cor(appren_drop_Na[,112:117]),1)
ggcorrplot(corr,hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-na.omit(appren)
corr<-round(cor(appren_drop_Na[,112:117]),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
View(appren_drop_Na)
valid<-rbind(df[(df$CENTRE==4),],df[(df$CENTRE==5),]) #Toulouse
Nice<-rbind(df[(df$CENTRE==1),],df[(df$CENTRE==2),],df[(df$CENTRE==3),],df[(df$CENTRE==6),])#Nice
appren_int<-sample(nrow(Nice),nrow(Nice)*0.7)#récupération des indices de l'échantillon
appren<-Nice[appren_int,]
valid_2<-Nice[-appren_int,]
appren<-drop_level_0_and_unassociate(appren,1)
appren_drop_Na<-na.omit(appren)
corr<-round(cor(appren_drop_Na[,112:117]),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
View(appren_drop_Na)
appren_drop_Na<-na.omit(appren)
dim(appren_drop_Na)
corr<-round(cor(appren_drop_Na[,112:117]),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
valid<-rbind(df[(df$CENTRE==4),],df[(df$CENTRE==5),]) #Toulouse
Nice<-rbind(df[(df$CENTRE==1),],df[(df$CENTRE==2),],df[(df$CENTRE==3),],df[(df$CENTRE==6),])#Nice
appren_int<-sample(nrow(Nice),nrow(Nice)*0.7)#récupération des indices de l'échantillon
appren<-Nice[appren_int,]
valid_2<-Nice[-appren_int,]
appren<-drop_level_0_and_unassociate(appren,1)
appren_drop_Na<-appren[,112:117]
appren_drop_Na<-na.omit(appren_drop_Na)
dim(appren_drop_Na)
corr<-round(cor(appren_drop_Na[,112:117]),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-appren[,112:117]
appren_drop_Na<-na.omit(appren_drop_Na)
dim(appren_drop_Na)
corr<-round(cor(appren_drop_Na),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-appren[,112:117]
appren_drop_Na<-na.omit(appren_drop_Na)
dim(appren_drop_Na)
corr<-round(cor(appren_drop_Na),1)
ggcorrplot(corr,method='circle',hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-appren[,112:117]
appren_drop_Na<-na.omit(appren_drop_Na)
dim(appren_drop_Na)
corr<-round(cor(appren_drop_Na),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-appren[,(112:117)]
appren_drop_Na<-na.omit(appren_drop_Na)
corr<-round(cor(appren_drop_Na),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-appren[,(1,112:117)]
appren_drop_Na<-na.omit(appren_drop_Na)
corr<-round(cor(appren_drop_Na),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-appren[,(112:117)]
appren_drop_Na<-appren[,(1)]
appren_drop_Na<-na.omit(appren_drop_Na)
corr<-round(cor(appren_drop_Na),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
appren_drop_Na<-appren[,(112:117)]
appren_drop_Na<-na.omit(appren_drop_Na)
corr<-round(cor(appren_drop_Na),1)
ggcorrplot(corr,method='square',hc.order = TRUE, type = "lower",lab = TRUE)
signif=col_significatives(appren,tt,indice=T,nb_début_vars_TableStack = 3)
tt=tableStack(vars=3:ncol(appren),
by=CANCER,
dataFrame=as.data.frame(appren),
na.col=T)
bold_lines=which(tt[,1] %in% colnames(appren))#Met les noms en gras
colnames(tt)[1:3]=c("CANCER","Benin","Malin") #on attribue les noms des colones
md_table(tt,bold.names=bold_lines)
signif=col_significatives(appren,tt,indice=T,nb_début_vars_TableStack = 3)
tt=tableStack(vars=signif,
by=1,
dataFrame=as.data.frame(appren),
na.col=T)
bold_lines=which(tt[,1] %in% colnames(appren))#Met les noms en gras
colnames(tt)[1:3]=c("CANCER","Benin","Malin") #on attribue les noms des colones
md_table(tt,bold.names=bold_lines)
appren_signif<-appren[,c(1,signif)]
dim(appren_signif)
idx_to_supress<-index_ou_names_nb_na_sup_certain_pourcent(appren_signif,index=T)
appren_nett=appren_signif[,-idx_to_supress]
dim(appren_nett)
index=c(1:ncol(appren_nett))
ft=sortiequali(as.data.frame(appren_nett),index)
ft=md_table(ft)
ft
rm(ft,index)
cols<-numcol(c("REGULARITE","DOULEUR_PALP","cN_plus","FORME_ECHO","CONTOURS_LOBULES","CONTOURS_ANGULEUX_SPICULES","CONTOURS_FLOUS","N_ECHO","N_ECHO_CENTRAL","N_ECHO_LATERAL","PAPILLES","INCISURES_NUCLEAIRES","C_GEANTES_HISTIOCYTAIRES","ATYPIES_ARCHI_PSEUDO_PAPILLAIRE","ECF","TT_EN_REPRISE","ECF_SECOND_TEMPS","TPMI","EFVPTC_NIFTP","LARGES_LAMBEAUX_MONOCOUCHES","MACROCALCIFICATION_CENTRALE","Hyperthyroidism","BE","HYPOECHOGENE"),appren_nett)
cols
appren_nett<-appren_nett[,-cols]
dim(appren_nett)
